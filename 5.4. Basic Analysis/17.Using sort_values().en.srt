1
00:00:00.04 --> 00:00:03.07
- [Instructor] Sort_values()
sorts the values in a series.

2
00:00:03.07 --> 00:00:07.08
As axis is equal to zero, you
are sorting along the column

3
00:00:07.08 --> 00:00:10.03
and in ascending order by default.

4
00:00:10.03 --> 00:00:13.04
So if you visualize a series
as being a single column,

5
00:00:13.04 --> 00:00:15.05
you are sorting the
contents of that column

6
00:00:15.05 --> 00:00:17.05
in ascending order.

7
00:00:17.05 --> 00:00:20.06
By default, the NaNs, or missing data,

8
00:00:20.06 --> 00:00:23.05
are put right at the end.

9
00:00:23.05 --> 00:00:26.09
Sort_values(), when used in
conjunction with a DataFrame,

10
00:00:26.09 --> 00:00:30.05
is particularly useful as
you can sort multiple series

11
00:00:30.05 --> 00:00:34.02
in ascending and descending order.

12
00:00:34.02 --> 00:00:39.01
Let's head over to the Jupyter
Notebook for some examples.

13
00:00:39.01 --> 00:00:42.05
Let's sort by the athletes' names.

14
00:00:42.05 --> 00:00:45.04
So OO is the name of the DataFrame,

15
00:00:45.04 --> 00:00:48.07
Athlete gives us the details
of the athlete's name,

16
00:00:48.07 --> 00:00:51.06
and sort_values().

17
00:00:51.06 --> 00:00:55.00
So this provides us the list
of all of the athletes' names

18
00:00:55.00 --> 00:00:58.00
sorted by the name of the athlete.

19
00:00:58.00 --> 00:01:01.07
Now if we look at the options
available within sort values,

20
00:01:01.07 --> 00:01:05.02
hitting Shift + Tab provides
one of the arguments,

21
00:01:05.02 --> 00:01:07.03
inplace equals false.

22
00:01:07.03 --> 00:01:10.05
The inplace argument is
one we will see often.

23
00:01:10.05 --> 00:01:13.04
And by default, inplace is equal to false,

24
00:01:13.04 --> 00:01:17.04
which means a new series will be returned.

25
00:01:17.04 --> 00:01:18.09
If we want to capture those changes,

26
00:01:18.09 --> 00:01:23.02
we will need to assign it to a new series.

27
00:01:23.02 --> 00:01:29.05
So I'm going to create
a new series called ATH,

28
00:01:29.05 --> 00:01:31.07
and the sorted list of athlete names

29
00:01:31.07 --> 00:01:34.06
will be in the series ATH.

30
00:01:34.06 --> 00:01:36.07
The sort_values() is particularly useful

31
00:01:36.07 --> 00:01:39.08
when used with DataFrames.

32
00:01:39.08 --> 00:01:43.06
So let's sort by the
edition of the Olympics,

33
00:01:43.06 --> 00:01:45.06
and the athletes' names.

34
00:01:45.06 --> 00:01:48.03
So OO is the name of our DataFrame,

35
00:01:48.03 --> 00:01:52.04
sort_values(), and let's say, by,

36
00:01:52.04 --> 00:01:55.02
and because we're going to
be using multiple series,

37
00:01:55.02 --> 00:01:57.00
we can enter them as a list.

38
00:01:57.00 --> 00:01:59.06
So we sort by Edition,

39
00:01:59.06 --> 00:02:02.01
and Athlete.

40
00:02:02.01 --> 00:02:04.04
So before you try this
out on your notebook,

41
00:02:04.04 --> 00:02:06.05
what do you expect to see?

42
00:02:06.05 --> 00:02:08.05
We will be sorting by edition and names,

43
00:02:08.05 --> 00:02:11.02
so the first couple of
rules will correspond

44
00:02:11.02 --> 00:02:13.03
to the first edition of the Olympics,

45
00:02:13.03 --> 00:02:16.05
and the first couple of
rules will have Edition 1896,

46
00:02:16.05 --> 00:02:20.08
with athletes' names beginning
at the start of the alphabet.

47
00:02:20.08 --> 00:02:23.01
The last couple of rules will be from

48
00:02:23.01 --> 00:02:26.08
the latest data that we have,
so that's the 2008 Olympics,

49
00:02:26.08 --> 00:02:30.09
with athlete's names towards
the end of the alphabet.

50
00:02:30.09 --> 00:02:34.05
So let's see if the alphabet
is what we expected.

51
00:02:34.05 --> 00:02:36.08
Because we have data for the 1896

52
00:02:36.08 --> 00:02:39.05
as being our first Olympic,

53
00:02:39.05 --> 00:02:42.09
the first couple of rules
correspond to the 1896 Olympics.

54
00:02:42.09 --> 00:02:46.02
And as we can see towards
the end of our DataFrame,

55
00:02:46.02 --> 00:02:48.09
the last couple of the rows
correspond to the 2008 Olympics,

56
00:02:48.09 --> 00:02:51.07
which is the last Olympics
that we have data for.

57
00:02:51.07 --> 00:02:55.04
Now, within each edition of the Olympics,

58
00:02:55.04 --> 00:02:57.05
the athletes' names are sorted

59
00:02:57.05 --> 00:03:02.01
all the way from A, B,
and C to X, Y, and Z.

60
00:03:02.01 --> 00:03:04.07
And that corresponds to the 1896 Olympics,

61
00:03:04.07 --> 00:03:07.04
and all the way to the 2008 Olympics.

62
00:03:07.04 --> 00:03:10.01
So not surprisingly, in the 2008 Olympics,

63
00:03:10.01 --> 00:03:12.01
towards the end of our DataFrame,

64
00:03:12.01 --> 00:03:14.09
we have athletes with names

65
00:03:14.09 --> 00:03:19.00
such as Zubari and Zueva.

66
00:03:19.00 --> 00:03:21.05
And so looking at that one line of code,

67
00:03:21.05 --> 00:03:23.04
we're sorting by edition first,

68
00:03:23.04 --> 00:03:25.03
and then the athletes'
names, and so each section

69
00:03:25.03 --> 00:03:27.08
of the edition will be sorted by athlete

70
00:03:27.08 --> 00:03:29.09
for each Olympic Edition.

71
00:03:29.09 --> 00:03:33.01
In the next video, we will
look at Boolean indexing.

