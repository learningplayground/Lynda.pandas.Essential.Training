1
00:00:03.06 --> 00:00:04.08
- [Instructor] Right,
now let's work through

2
00:00:04.08 --> 00:00:06.08
these solutions together.

3
00:00:06.08 --> 00:00:09.03
So the first thing we want
to do is import Pandas as pd,

4
00:00:09.03 --> 00:00:13.03
and let's have an
overview of our data set.

5
00:00:13.03 --> 00:00:14.07
First question is, in which events

6
00:00:14.07 --> 00:00:17.08
did Jesse Owens win a medal?

7
00:00:17.08 --> 00:00:19.09
Now, the first thing
to be aware of is that

8
00:00:19.09 --> 00:00:23.01
in the Athletes field,
the names are such that

9
00:00:23.01 --> 00:00:25.05
it's first the surname,
which is in capitals,

10
00:00:25.05 --> 00:00:27.08
and then the first name.

11
00:00:27.08 --> 00:00:32.00
So we need to be aware of that
when querying our data frame.

12
00:00:32.00 --> 00:00:35.02
In which events did
Jesse Owens win a medal?

13
00:00:35.02 --> 00:00:36.06
So if we look at our data frame,

14
00:00:36.06 --> 00:00:39.06
we can see that the athlete names are such

15
00:00:39.06 --> 00:00:42.02
that the surname is first in capitals

16
00:00:42.02 --> 00:00:44.03
and then the first name.

17
00:00:44.03 --> 00:00:48.01
So we need to be aware of that
when querying our data frame.

18
00:00:48.01 --> 00:00:53.08
So I can enter OO dot
athlete equals, and then,

19
00:00:53.08 --> 00:01:00.09
because his surname is
Owens, Owens, Jesse,

20
00:01:00.09 --> 00:01:02.05
and if I hit Enter here, I'm going to get

21
00:01:02.05 --> 00:01:05.03
a whole load of trues and falses.

22
00:01:05.03 --> 00:01:11.05
So I encapsulate that in square brackets.

23
00:01:11.05 --> 00:01:13.07
And I can see that these are the rows

24
00:01:13.07 --> 00:01:16.03
corresponding to Jesse Owens.

25
00:01:16.03 --> 00:01:23.06
If I assign the data frame
JO for Jesse Owens to that,

26
00:01:23.06 --> 00:01:25.04
and then if I want to just get the events

27
00:01:25.04 --> 00:01:28.02
that he was involved in and nothing else,

28
00:01:28.02 --> 00:01:35.00
I could do JO dot events dot value counts,

29
00:01:35.00 --> 00:01:36.05
and this will give me all of the events

30
00:01:36.05 --> 00:01:39.06
that Jesse Owens took part in.

31
00:01:39.06 --> 00:01:42.07
Let's go on to the next question.

32
00:01:42.07 --> 00:01:44.09
Which country has won the
most men's gold medals

33
00:01:44.09 --> 00:01:47.09
in singles badminton over the years?

34
00:01:47.09 --> 00:01:51.02
Sort the results alphabetically
by the player's names.

35
00:01:51.02 --> 00:01:52.07
So the first thing to notice here

36
00:01:52.07 --> 00:01:54.07
is that we've got multiple conditions,

37
00:01:54.07 --> 00:01:57.06
and each of those conditions
needs to be in brackets.

38
00:01:57.06 --> 00:02:05.00
So OO medal type, which is gold.

39
00:02:05.00 --> 00:02:12.06
And OO dot gender, which is men.

40
00:02:12.06 --> 00:02:20.01
And OO dot sport, which is badminton.

41
00:02:20.01 --> 00:02:23.07
Now, I'm not sure whether it's the sport

42
00:02:23.07 --> 00:02:25.01
or the event which is badminton,

43
00:02:25.01 --> 00:02:27.01
so I can just do a quick check here.

44
00:02:27.01 --> 00:02:31.00
I do OO dot sport dot value counts,

45
00:02:31.00 --> 00:02:37.05
and see whether that comes
under Event or Sport.

46
00:02:37.05 --> 00:02:38.09
And I can see here that
badminton is, in fact,

47
00:02:38.09 --> 00:02:43.07
listed under Sport, so that query is fine.

48
00:02:43.07 --> 00:02:51.06
And if I encapsulate that
in square brackets, as such,

49
00:02:51.06 --> 00:02:57.06
and call that data frame
gold, badminton, and men,

50
00:02:57.06 --> 00:03:01.09
so GBM, and we see we've got the results

51
00:03:01.09 --> 00:03:04.05
for countries that have won gold medals

52
00:03:04.05 --> 00:03:05.08
in badminton over the years.

53
00:03:05.08 --> 00:03:10.00
So that's Korea, Indonesia, Denmark,

54
00:03:10.00 --> 00:03:14.04
Indonesia, China, Korea, and so on.

55
00:03:14.04 --> 00:03:16.07
Now, if I want to sort
the results alphabetically

56
00:03:16.07 --> 00:03:21.04
by the player's names, I
can chain those requests

57
00:03:21.04 --> 00:03:22.07
onto the GBM.

58
00:03:22.07 --> 00:03:26.09
So GBM dot sort values, and this is where

59
00:03:26.09 --> 00:03:34.00
I'm sorting by the data
frame, so I say by,

60
00:03:34.00 --> 00:03:37.09
athlete, and you can see that the results

61
00:03:37.09 --> 00:03:42.03
are now sorted by the
surname of the athletes.

62
00:03:42.03 --> 00:03:44.00
Onto the next question.

63
00:03:44.00 --> 00:03:45.07
Which three countries
have won the most medals

64
00:03:45.07 --> 00:03:49.00
in recent years?

65
00:03:49.00 --> 00:03:51.09
So clearly we have the
conditional operator here,

66
00:03:51.09 --> 00:03:54.08
and we need to use OO dot edition,

67
00:03:54.08 --> 00:03:56.06
which is the years of the Olympics,

68
00:03:56.06 --> 00:03:58.09
and I want all of the years
which are greater than

69
00:03:58.09 --> 00:04:03.05
or equal to 1984, and
since the last values

70
00:04:03.05 --> 00:04:06.08
in our data set is 2008, I
don't need to specifically

71
00:04:06.08 --> 00:04:11.03
specify the years that are
less than or equal to 2008.

72
00:04:11.03 --> 00:04:21.02
And so if I do that, and I
call that data frame recent,

73
00:04:21.02 --> 00:04:24.05
and I hit Enter, these
are all of the countries

74
00:04:24.05 --> 00:04:27.01
that have won medals in recent years.

75
00:04:27.01 --> 00:04:28.06
Now, if I want the three countries

76
00:04:28.06 --> 00:04:30.01
that have won the most medals,

77
00:04:30.01 --> 00:04:31.05
I'm going to have to use value count.

78
00:04:31.05 --> 00:04:38.04
So I do REC, NOC for the
countries, value counts,

79
00:04:38.04 --> 00:04:40.06
and that's going to sort the
number of medals received

80
00:04:40.06 --> 00:04:44.08
by those countries from 1984 onwards.

81
00:04:44.08 --> 00:04:46.05
And you can see that USA has won the most,

82
00:04:46.05 --> 00:04:49.01
then Australia, Germany,
and China, and so on.

83
00:04:49.01 --> 00:04:51.08
Now, if I want to specify the top three,

84
00:04:51.08 --> 00:04:55.05
I can use head, use the parameter three,

85
00:04:55.05 --> 00:04:57.07
and that gives me the results that I need.

86
00:04:57.07 --> 00:05:01.00
Let's move on to the next question.

87
00:05:01.00 --> 00:05:03.09
Display the male gold medal
winners for the 100 meters

88
00:05:03.09 --> 00:05:07.00
track and field sprint
event over the years.

89
00:05:07.00 --> 00:05:09.09
List the results starting
with the most recent.

90
00:05:09.09 --> 00:05:12.05
Show the Olympic city, edition, athlete,

91
00:05:12.05 --> 00:05:15.00
and the country they represent.

92
00:05:15.00 --> 00:05:17.02
So again, multiple conditions here.

93
00:05:17.02 --> 00:05:22.02
So gold, male, and let's say 100 meters.

94
00:05:22.02 --> 00:05:26.04
So remember that we need to
include all of those conditions

95
00:05:26.04 --> 00:05:31.03
in brackets, so gender, men.

96
00:05:31.03 --> 00:05:39.01
And medal, gold.

97
00:05:39.01 --> 00:05:40.09
And the event, well, I'm not sure what

98
00:05:40.09 --> 00:05:43.09
the event title is, so
let me have a quick look

99
00:05:43.09 --> 00:05:46.03
at the value counts for that.

100
00:05:46.03 --> 00:05:50.05
So event dot value counts,

101
00:05:50.05 --> 00:05:55.06
and I will be able to get
the format of those events.

102
00:05:55.06 --> 00:06:01.00
And I can see that the
events have this format

103
00:06:01.00 --> 00:06:03.07
of four times 100 meters and so on.

104
00:06:03.07 --> 00:06:08.03
So I can use OO event and then 100 meters,

105
00:06:08.03 --> 00:06:10.01
and that will give me
the result that I want.

106
00:06:10.01 --> 00:06:11.02
So let's have a look and see whether

107
00:06:11.02 --> 00:06:13.06
this gives me what I want.

108
00:06:13.06 --> 00:06:15.06
And you can see, then, that
yes, it is the 100 meters

109
00:06:15.06 --> 00:06:19.06
that the men have won, and
they've all received gold medals.

110
00:06:19.06 --> 00:06:21.04
So let's list the results starting with

111
00:06:21.04 --> 00:06:23.06
the most recent first.

112
00:06:23.06 --> 00:06:31.01
So we sort values by edition,

113
00:06:31.01 --> 00:06:33.03
and critically, we need to
change that ascending flag.

114
00:06:33.03 --> 00:06:36.08
So ascending is equal to false.

115
00:06:36.08 --> 00:06:39.08
And we can see now that we've
got the 100 meters winner,

116
00:06:39.08 --> 00:06:42.02
Usain Bolt, for 2008.

117
00:06:42.02 --> 00:06:45.03
The 100 meters winner in
2004, which is Justin Gatlin.

118
00:06:45.03 --> 00:06:48.05
Maurice Greene in 2000, and so on, right?

119
00:06:48.05 --> 00:06:50.08
But this data frame has
several more columns

120
00:06:50.08 --> 00:06:53.00
than has been requested in the question.

121
00:06:53.00 --> 00:06:55.06
So for example, we have
things like the event,

122
00:06:55.06 --> 00:06:57.07
the event gender, and so on,
which has not been requested.

123
00:06:57.07 --> 00:07:01.01
So in order to specify
these additional series,

124
00:07:01.01 --> 00:07:02.06
we can include them as a list.

125
00:07:02.06 --> 00:07:08.03
So we say the Olympic
city, which is just city.

126
00:07:08.03 --> 00:07:10.05
The edition.

127
00:07:10.05 --> 00:07:14.06
The athlete name.

128
00:07:14.06 --> 00:07:18.00
And the country name, which is NOC.

129
00:07:18.00 --> 00:07:18.08
And here we have that.

130
00:07:18.08 --> 00:07:22.01
So we can see that Usain
Bolt won the 100 meters gold

131
00:07:22.01 --> 00:07:25.06
in the 2008 event, and he's from Jamaica.

132
00:07:25.06 --> 00:07:27.08
Justin Gatlin, from the
US, won the 100 meters gold

133
00:07:27.08 --> 00:07:31.08
in 2004, and so on.

134
00:07:31.08 --> 00:07:33.06
And you can see that using a combination

135
00:07:33.06 --> 00:07:36.01
of sort values and
value counts can help us

136
00:07:36.01 --> 00:07:40.02
answer some fairly interesting
questions about our data.

